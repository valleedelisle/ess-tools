apiVersion: v1
kind: Template
labels:
  app: ess-notifier
  template: ess-notifier
message: 'The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.
  For more information about using this template, including OpenShift considerations,
  see https://github.com/valleedelisle/ess-tools'
metadata:
  annotations:
    description: https://github.com/valleedelisle/ess-tools
    iconClass: icon-python
    openshift.io/display-name: Enhanced Solution Support Notification Tool
    openshift.io/documentation-url: https://github.com/valleedelisle/ess-tools
    openshift.io/long-description: ''
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: quickstart,python
    template.openshift.io/bindable: 'false'
  name: ess-notifier
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
    secret-key: ${SECRET_KEY}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: INSTANCE_NAME
          value: ${NAME}
        - name: PIP_INDEX_URL
          value: ${PIP_INDEX_URL}
        from:
          kind: ImageStreamTag
          name: python:${PYTHON_VERSION}
          namespace: ${NAMESPACE}
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      rollingParams:
        pre:
          execNewPod:
            command:
            - ./resources/init_database.sh 
            volumes:
              - "${NAME}-alembic-versions"
          failurePolicy: Abort
      type: Rolling
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - env:
          - name: INSTANCE_NAME
            value: ${NAME}
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: DATABASE_ENGINE
            value: ${DATABASE_ENGINE}
          - name: DATABASE_NAME
            value: ${DATABASE_NAME}
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: APP_FILE
            value: ${APP_FILE}
          - name: APP_CONFIG
            value: ${APP_CONFIG}
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret-key
                name: ${NAME}
          image: ' '
          name: ${NAME}
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          volumeMounts:
          - name: ${NAME}-config
            mountPath: /opt/app-root/src/hydra-notifierd-secrets.conf
            subPath: hydra-notifierd-secrets.conf
          - name: ${NAME}-config
            mountPath: /opt/app-root/src/service-account.json
            subPath: service-account.json
          - mountPath: /opt/app-root/src/alembic/versions
            name: ${NAME}-alembic-versions
        volumes: 
        - name: "${NAME}-config"
          secret:
            secretName: ${NAME}-config
        - name: "${NAME}-alembic-versions"
          persistentVolumeClaim:
            claimName: "${NAME}-alembic-versions"

    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}-alembic-versions"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}-${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: "${NAME}-${DATABASE_SERVICE_NAME}"
  spec:
    ports:
    - name: "${NAME}-mariadb"
      port: 3306
      targetPort: 3306
    selector:
      name: "${NAME}-${DATABASE_SERVICE_NAME}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${NAME}-${DATABASE_SERVICE_NAME}"
  spec:
    replicas: 1
    selector:
      name: "${NAME}-${DATABASE_SERVICE_NAME}"
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: "${NAME}-${DATABASE_SERVICE_NAME}"
        name: "${NAME}-${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - env:
          - name: INSTANCE_NAME
            value: ${NAME}
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: MYSQL_DATABASE
            value: ${DATABASE_NAME}
          image: ' '
          name: ${NAME}-mariadb
          ports:
          - containerPort: 3306
          resources:
            limits:
              memory: ${MEMORY_MARIADB_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql
            name: "${DATABASE_SERVICE_NAME}-data"
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${NAME}-${DATABASE_SERVICE_NAME}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - "${NAME}-mariadb"
        from:
          kind: ImageStreamTag
          name: mariadb:${MARIADB_VERSION}
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: ess-notifier
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of Python image to be used (3.6 or latest).
  displayName: Version of Python Image
  name: PYTHON_VERSION
  required: true
  value: '3.6'
- description: Version of MariaDB image to be used (10 or latest).
  displayName: Version of MariaDB Image
  name: MARIADB_VERSION
  required: true
  value: latest
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MariaDB container can use.
  displayName: Memory Limit (MariaDB)
  name: MEMORY_MARIADB_LIMIT
  required: true
  value: 512Mi
- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 5Gi
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/valleedelisle/ess-tools.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
  value: openshit-db-config
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the service, if left blank
    a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
  value: ''
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: "mariadb"
- description: 'Database engine: postgresql, mysql or sqlite (default).'
  displayName: Database Engine
  name: DATABASE_ENGINE
  required: true
  value: mysql
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: ess_notifier
- displayName: Database Username
  name: DATABASE_USER
  required: true
  value: ess_notifier
- displayName: Database User Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- description: File executed by the container
  displayName: Application runnable script
  name: APP_FILE
  value: hydra-notifierd.py
- description: Relative path to Gunicorn configuration file (optional).
  displayName: Application Configuration File Path
  name: APP_CONFIG
- description: Set this to a long random string.
  displayName: Secret Key
  from: '[\w]{50}'
  generate: expression
  name: SECRET_KEY
- description: The custom PyPi index URL
  displayName: Custom PyPi Index URL
  name: PIP_INDEX_URL
  value: ''
